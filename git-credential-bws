#!/usr/bin/env bash
# A credential helper for Git that utiilzes the bws bitwarden secrets manager CLI

set -euo pipefail

# These are passed as arguments when configuring the helper in .gitconfig
# Example: git config --global credential.helper '!git-credential-bws -s <secret_id> -p <password_key> [-u <username_key>]'

# Default values
USERNAME_KEY=""
PASSWORD_KEY=""
SECRET_ID=""

# Function to display help message
print_help() {
	echo "Usage: git config --global credential.helper '!git-credential-bws -s <secret_id> -p <password_key> [-u <username_key>]'"
	echo ""
	echo "Options:"
	echo -e "  -s <secret_id>   	The Bitwarden secret ID (required)."
	echo -e "  -p <password_key> 	The key for the password in the secret's JSON value."
	echo -e "  -u <username_key> 	The key for the username in the secret's JSON value (optional)."
	echo -e "  -h              	Display this help message."
	echo -e "\nExamples:"
	echo -e "  git config --global credential.helper '!git-credential-bws -s <secret_id> -p password'"
	echo -e "  git config --global credential.helper '!git-credential-bws -s <secret_id> -u username -p password'"
	echo -e "  git config --global credential.https://example.com.helper '!git-credential-bws -s <secret_id> -p password'"
	echo -e "\nNote: The secret's value should be a JSON string containing the keys specified."
	echo -e "      For example: {\"username\": \"myuser\", \"password\": \"mypass\"}"
	exit 0
}

# Parse command-line arguments using getopts
while getopts ":u:p:s:h" opt; do
	case "$opt" in
	u)
		USERNAME_KEY="$OPTARG"
		;;
	p)
		PASSWORD_KEY="$OPTARG"
		;;
	s)
		SECRET_ID="$OPTARG"
		;;
	h)
		print_help
		;;
	\?)
		echo "Invalid option: -$OPTARG" >&2
		exit 1
		;;
	:)
		echo "Option -$OPTARG requires an argument." >&2
		exit 1
		;;
	esac
done

# Remove parsed options from the argument list
shift $((OPTIND - 1))

# Check if required arguments are provided
if [[ -z "$SECRET_ID" ]]; then
	echo "Error: Secret ID argument is missing." >&2
	echo "Use -h for help." >&2
	exit 1
fi

# Check for required commands
if ! command -v bws &> /dev/null; then
	echo "Error: 'bws' command not found. Please install the Bitwarden Secrets Manager CLI." >&2
	exit 1
fi

if ! command -v jq &> /dev/null; then
	echo "Error: 'jq' command not found. Please install jq." >&2
	exit 1
fi

# Read Git's command from stdin
read -r COMMAND

if [[ "$COMMAND" == "get" ]]; then
	# Read protocol, host, etc. from stdin (required by Git protocol, though not used here directly)
	while IFS= read -r line && [[ -n "$line" ]]; do
	: # Consume stdin lines until an empty line is encountered
	done

	# Fetch the secret JSON from Bitwarden Secrets Manager
	SECRET_JSON=$(bws secret get "$SECRET_ID" --output json 2> /dev/null) || {
		echo "Error: Failed to fetch secret '$SECRET_ID' using bws." >&2
		# Exit without outputting anything, Git will try the next helper or fail
		exit 1
	}

	# Extract the nested JSON value containing the actual credentials
	# Assuming the secret's value field stores a JSON string like: {"user": "myuser", "pass": "mypass"}
	CREDENTIAL_JSON=$(echo "$SECRET_JSON" | jq -r '.value // empty')
	if [[ -z "$CREDENTIAL_JSON" ]]; then
		echo "Error: Secret '$SECRET_ID' found, but its 'value' field is empty or not valid JSON." >&2
		exit 1
	fi

	# Extract username and password using the provided keys
	USERNAME=$(echo "$CREDENTIAL_JSON" | jq -r --arg key "$USERNAME_KEY" '.[$key] // empty')
	PASSWORD=$(echo "$CREDENTIAL_JSON" | jq -r --arg key "$PASSWORD_KEY" '.[$key] // empty')

	if [[ -z "$PASSWORD" ]]; then
		echo "Error: Password key '$PASSWORD_KEY' not found in secret '$SECRET_ID'." >&2
		exit 1
	fi

	# Output credentials in the format Git expects
	if [[ -n "$USERNAME" ]]; then
        echo username=$USERNAME
    fi
	echo password=$PASSWORD
	exit 0
fi
